<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>30</x>
      <y>110</y>
      <w>380</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>IntNode
--
-nodeData : int
-nodePointer : intNode
--
+getNodeData(): int
+getNodePointer(): IntNode*
+setNodeData(intValue): void
+setNodePointer(IntNOde * next): void

+IntNode(): constructor
+IntNOde(int value): init
+IntNode(int value, IntNode * nextNode): constructor

bg=blue
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>20</x>
      <y>480</y>
      <w>380</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
-size:int
-front:IntNode*
--
+IntNodeArray(int size):constructor
+setAtIndex(int index, int value) : void
+getFromIndex(int index) : int
+getSize() : int

bg=red
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>0</x>
      <y>0</y>
      <w>200</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Created by PeytonTrevino
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>460</x>
      <y>40</y>
      <w>380</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
-nodeData : Type
nodePointer : Node&lt;Type&gt;*
--
Constructors
+Node() : constructor
+Node(Type value): constructor
+Node(Type data, Node&lt;Type&gt;*pointer): constructor

Methods
+getNodeData() : Type
+getNodePointer() : Node&lt;Type&gt;
+setNodeData(Type data) : void
+ setNodePointer(node&lt;Type&gt; * next): void

bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>480</x>
      <y>410</y>
      <w>480</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--

-front : Node&lt;Type&gt;*
-size : int

--
Constructor's
+Array(): constructor
+Array(int Size): constructor

Advanced
+ ~Array&lt;Type&gt;():destructor
+Array&lt;Type&gt;(const Array&lt;Type&gt;&amp;toBeCopied): copy constructor

Methods
+getSize():int
+getFront()const:Node&lt;Type&gt;*
+setAtIndex(int index, Type value): void
+getFromIndex(int index): Type


bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>670</x>
      <y>300</y>
      <w>50</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
fg=red</panel_attributes>
    <additional_attributes>10.0;110.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>190</x>
      <y>370</y>
      <w>50</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;110.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>0</x>
      <y>40</y>
      <w>430</w>
      <h>670</h>
    </coordinates>
    <panel_attributes>Typed Sample
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>720</y>
      <w>430</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
-size : int
- front : Node&lt;Type&gt;*
--
+List&lt;Type&gt;() : constructor
+List&lt;Type&gt;(Const List&lt;Type&gt;&amp;source): copy constructor
+ ~List&lt;Type&gt;(): destructor

+addAtIndex(int index, Type value): void
+addFront(Type value): void
+addEnd(Type value): void
+remove(int index): void
+setAtIndex(int index, Type data): Type
+getFromIndex(int index): Type
+contains(Type data): bool
+getSize()const : int
+getFront() const : Node&lt;Type&gt;*
+getEnd()const:Node&lt;Type&gt;*
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1030</x>
      <y>40</y>
      <w>780</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
-nodeData: type
-previous : BiDirectionalnode&lt;Type&gt;*
-next : BiDirectionalNode&lt;Type&gt;*

--
+BiDirectionalNode(): constructor
+BiDirectionalNode(Typoe data): constructor
+BiDirectionalNode(Type data BiDirectionalNode&lt;Type&gt;*previous, BiDirectionalNode&lt;Type&gt;*next): constructor

+getNodeData(): Type
+setNodeData(): void
+getPreviousNode(): BiDirectionalNode&lt;Type&gt;*
+getNextNode(): BiDirectionalNode&lt;Type&gt;*
+setNextNode(BiDirectionalNode&lt;Type&gt;*next):void
+setPreviousNode(BiDirectional&lt;Type&gt;*previous): void




bg=CYAN</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>830</x>
      <y>170</y>
      <w>220</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;200.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1040</x>
      <y>580</y>
      <w>510</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>DoublyLindList&lt;Type&gt;
--
-front: BiDirectionalNode&lt;Type&gt;*
-end : BiDirectionalNode&lt;Type&gt;*
-size : int
--
*Non virtual methods*
+getSize()const : int
+getFront()const : BiDirectionalNode&lt;Type&gt;*
+getEnd() const : BiDirectionalNode&lt;Type&gt;*

*Virtual methods*
+add(Type Value)
+remove(int)
bg=red
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1030</x>
      <y>980</y>
      <w>240</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>Queue
--
-front: BiDiectionalNode&lt;Type&gt;*
-end: BiDirectionalNode&lt;Type&gt;*
-size: int
--
+Queue(): constructor
+~ Queue(): destructor

+add(Type data): void
+remove(int index): void

+dequeue()
+enqueue()
+peek()
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1290</x>
      <y>980</y>
      <w>260</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>Stack
--
-front: BiDiectionalNode&lt;Type&gt;*
-end: BiDirectionalNode&lt;Type&gt;*
-size: int
--
+Stack(): constructor
+~Stack():destructor

+add(Type data) : void
+remove(int index) : void

+pop()
+push()
+peek()
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1560</x>
      <y>870</y>
      <w>320</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>CircularlyLinkedList
--
-front: BiDiectionalNode&lt;Type&gt;*
-end: BiDirectionalNode&lt;Type&gt;*
-size: int
--
+CircularList(): Constructur
+~CircularList(): Destructor

+add(Type): void
+remove(int index): Type

+addAtIndexFast(int index, Type data): void


group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1210</x>
      <y>830</y>
      <w>110</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
group=2</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;150.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1290</x>
      <y>830</y>
      <w>100</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
group=2</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;150.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1290</x>
      <y>830</y>
      <w>360</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
group=2</panel_attributes>
    <additional_attributes>10.0;10.0;340.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1400</x>
      <y>450</y>
      <w>30</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
fg=blue</panel_attributes>
    <additional_attributes>10.0;130.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>640</x>
      <y>830</y>
      <w>330</w>
      <h>340</h>
    </coordinates>
    <panel_attributes>DoubleList&lt;Type&gt;
--
-front: BiDiectionalNode&lt;Type&gt;*
-end: BiDirectionalNode&lt;Type&gt;*
-size: int
--
+DoubleList(): constructor
+~DoubleList(): destructor

+add(Type data): void
+remove(int index): Type

+addFront(Type data): void
+addEnd(Type data): void
+addAtIndex(int index, Type data): void
+addAtIndexFast(int index, Type value): void


group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>960</x>
      <y>830</y>
      <w>360</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
group=2</panel_attributes>
    <additional_attributes>340.0;10.0;10.0;50.0</additional_attributes>
  </element>
</diagram>